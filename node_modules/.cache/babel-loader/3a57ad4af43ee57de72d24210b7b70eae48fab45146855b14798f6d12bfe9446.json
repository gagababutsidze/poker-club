{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaga\\\\Desktop\\\\poker-club\\\\src\\\\WebSocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(null);\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s();\n  const connection = useRef(null);\n  const isConnecting = useRef(false);\n  useEffect(() => {\n    const connect = () => {\n      if (!connection.current && !isConnecting.current) {\n        isConnecting.current = true;\n        const ws = new WebSocket('ws://localhost:8080');\n        ws.onopen = () => {\n          console.log('WebSocket connection established');\n          isConnecting.current = false;\n        };\n        ws.onerror = error => {\n          console.error('WebSocket error:', error);\n        };\n        ws.onclose = () => {\n          console.log('WebSocket closed. Reconnecting...');\n          setTimeout(connect, 2000); // Reconnect after 2 seconds\n        };\n        connection.current = ws;\n      }\n    };\n    connect();\n    return () => {\n      var _connection$current;\n      (_connection$current = connection.current) === null || _connection$current === void 0 ? void 0 : _connection$current.close();\n      connection.current = null;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: connection.current,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(WebSocketProvider, \"ys/uH8uJafrTWBhNEixr5XcGmUg=\");\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  return useContext(WebSocketContext);\n};\n_s2(useWebSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","jsxDEV","_jsxDEV","WebSocketContext","WebSocketProvider","children","_s","connection","isConnecting","connect","current","ws","WebSocket","onopen","console","log","onerror","error","onclose","setTimeout","_connection$current","close","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","$RefreshReg$"],"sources":["C:/Users/gaga/Desktop/poker-club/src/WebSocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef } from 'react';\r\n\r\nconst WebSocketContext = createContext<WebSocket | null>(null);\r\n\r\nexport const WebSocketProvider: React.FC = ({ children }) => {\r\n    const connection = useRef<WebSocket | null>(null);\r\n    const isConnecting = useRef(false);\r\n\r\n    useEffect(() => {\r\n        const connect = () => {\r\n            if (!connection.current && !isConnecting.current) {\r\n                isConnecting.current = true;\r\n                const ws = new WebSocket('ws://localhost:8080');\r\n\r\n                ws.onopen = () => {\r\n                    console.log('WebSocket connection established');\r\n                    isConnecting.current = false;\r\n                };\r\n\r\n                ws.onerror = (error) => {\r\n                    console.error('WebSocket error:', error);\r\n                };\r\n\r\n                ws.onclose = () => {\r\n                    console.log('WebSocket closed. Reconnecting...');\r\n                    setTimeout(connect, 2000); // Reconnect after 2 seconds\r\n                };\r\n\r\n                connection.current = ws;\r\n            }\r\n        };\r\n\r\n        connect();\r\n\r\n        return () => {\r\n            connection.current?.close();\r\n            connection.current = null;\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <WebSocketContext.Provider value={connection.current}>\r\n            {children}\r\n        </WebSocketContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useWebSocket = () => {\r\n    return useContext(WebSocketContext);\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,gBAAgB,gBAAGN,aAAa,CAAmB,IAAI,CAAC;AAE9D,OAAO,MAAMO,iBAA2B,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAMC,UAAU,GAAGP,MAAM,CAAmB,IAAI,CAAC;EACjD,MAAMQ,YAAY,GAAGR,MAAM,CAAC,KAAK,CAAC;EAElCD,SAAS,CAAC,MAAM;IACZ,MAAMU,OAAO,GAAGA,CAAA,KAAM;MAClB,IAAI,CAACF,UAAU,CAACG,OAAO,IAAI,CAACF,YAAY,CAACE,OAAO,EAAE;QAC9CF,YAAY,CAACE,OAAO,GAAG,IAAI;QAC3B,MAAMC,EAAE,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;QAE/CD,EAAE,CAACE,MAAM,GAAG,MAAM;UACdC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UAC/CP,YAAY,CAACE,OAAO,GAAG,KAAK;QAChC,CAAC;QAEDC,EAAE,CAACK,OAAO,GAAIC,KAAK,IAAK;UACpBH,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QAC5C,CAAC;QAEDN,EAAE,CAACO,OAAO,GAAG,MAAM;UACfJ,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAChDI,UAAU,CAACV,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAC/B,CAAC;QAEDF,UAAU,CAACG,OAAO,GAAGC,EAAE;MAC3B;IACJ,CAAC;IAEDF,OAAO,CAAC,CAAC;IAET,OAAO,MAAM;MAAA,IAAAW,mBAAA;MACT,CAAAA,mBAAA,GAAAb,UAAU,CAACG,OAAO,cAAAU,mBAAA,uBAAlBA,mBAAA,CAAoBC,KAAK,CAAC,CAAC;MAC3Bd,UAAU,CAACG,OAAO,GAAG,IAAI;IAC7B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIR,OAAA,CAACC,gBAAgB,CAACmB,QAAQ;IAACC,KAAK,EAAEhB,UAAU,CAACG,OAAQ;IAAAL,QAAA,EAChDA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAEpC,CAAC;AAACrB,EAAA,CAzCWF,iBAA2B;AAAAwB,EAAA,GAA3BxB,iBAA2B;AA2CxC,OAAO,MAAMyB,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,OAAOhC,UAAU,CAACK,gBAAgB,CAAC;AACvC,CAAC;AAAC2B,GAAA,CAFWD,YAAY;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}