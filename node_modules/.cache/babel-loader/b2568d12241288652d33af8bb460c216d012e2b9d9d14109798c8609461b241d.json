{"ast":null,"code":"let socket = null;\nlet openPromise = null;\nexport const connectWebSocket = url => {\n  if (!socket || socket.readyState === WebSocket.CLOSED) {\n    socket = new WebSocket(url);\n    openPromise = new Promise((resolve, reject) => {\n      socket.onopen = () => {\n        console.log('WebSocket connection opened.');\n        resolve(socket);\n      };\n      socket.onerror = error => {\n        console.error('WebSocket error:', error);\n        reject(error);\n      };\n    });\n    socket.onclose = () => {\n      console.log('WebSocket connection closed.');\n    };\n  }\n  return openPromise;\n};\nexport const sendMessage = async message => {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    socket.send(JSON.stringify(message));\n  } else {\n    console.warn('WebSocket is not open. Message not sent:', message);\n  }\n};\nexport const addMessageListener = callback => {\n  if (socket) {\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      callback(data);\n    };\n  }\n};\nexport const closeWebSocket = () => {\n  if (socket) {\n    socket.close();\n    socket = null;\n  }\n};","map":{"version":3,"names":["socket","openPromise","connectWebSocket","url","readyState","WebSocket","CLOSED","Promise","resolve","reject","onopen","console","log","onerror","error","onclose","sendMessage","message","OPEN","send","JSON","stringify","warn","addMessageListener","callback","onmessage","event","data","parse","closeWebSocket","close"],"sources":["C:/Users/gaga/Desktop/poker-club/src/ws.js"],"sourcesContent":["let socket = null;\r\nlet openPromise = null;\r\n\r\nexport const connectWebSocket =  (url) => {\r\n  if (!socket || socket.readyState === WebSocket.CLOSED) {\r\n    socket = new WebSocket(url);\r\n\r\n    openPromise = new Promise((resolve, reject) => {\r\n      socket.onopen = () => {\r\n        console.log('WebSocket connection opened.');\r\n        resolve(socket);\r\n      };\r\n\r\n      socket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        reject(error);\r\n      };\r\n    });\r\n\r\n    socket.onclose = () => {\r\n      console.log('WebSocket connection closed.');\r\n    };\r\n  }\r\n  return openPromise;\r\n};\r\n\r\nexport  const sendMessage = async (message) => {\r\n  if (socket && socket.readyState === WebSocket.OPEN) {\r\n    socket.send(JSON.stringify(message));\r\n  } else {\r\n    console.warn('WebSocket is not open. Message not sent:', message);\r\n  }\r\n};\r\n\r\nexport const addMessageListener = (callback) => {\r\n  if (socket) {\r\n    socket.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      callback(data);\r\n    };\r\n  }\r\n};\r\n\r\nexport const closeWebSocket = () => {\r\n  if (socket) {\r\n    socket.close();\r\n    socket = null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,IAAIA,MAAM,GAAG,IAAI;AACjB,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,gBAAgB,GAAKC,GAAG,IAAK;EACxC,IAAI,CAACH,MAAM,IAAIA,MAAM,CAACI,UAAU,KAAKC,SAAS,CAACC,MAAM,EAAE;IACrDN,MAAM,GAAG,IAAIK,SAAS,CAACF,GAAG,CAAC;IAE3BF,WAAW,GAAG,IAAIM,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAC7CT,MAAM,CAACU,MAAM,GAAG,MAAM;QACpBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3CJ,OAAO,CAACR,MAAM,CAAC;MACjB,CAAC;MAEDA,MAAM,CAACa,OAAO,GAAIC,KAAK,IAAK;QAC1BH,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxCL,MAAM,CAACK,KAAK,CAAC;MACf,CAAC;IACH,CAAC,CAAC;IAEFd,MAAM,CAACe,OAAO,GAAG,MAAM;MACrBJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC;EACH;EACA,OAAOX,WAAW;AACpB,CAAC;AAED,OAAQ,MAAMe,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC7C,IAAIjB,MAAM,IAAIA,MAAM,CAACI,UAAU,KAAKC,SAAS,CAACa,IAAI,EAAE;IAClDlB,MAAM,CAACmB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;EACtC,CAAC,MAAM;IACLN,OAAO,CAACW,IAAI,CAAC,0CAA0C,EAAEL,OAAO,CAAC;EACnE;AACF,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAIC,QAAQ,IAAK;EAC9C,IAAIxB,MAAM,EAAE;IACVA,MAAM,CAACyB,SAAS,GAAIC,KAAK,IAAK;MAC5B,MAAMC,IAAI,GAAGP,IAAI,CAACQ,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;MACnCH,QAAQ,CAACG,IAAI,CAAC;IAChB,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI7B,MAAM,EAAE;IACVA,MAAM,CAAC8B,KAAK,CAAC,CAAC;IACd9B,MAAM,GAAG,IAAI;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}