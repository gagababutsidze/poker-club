{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaga\\\\Desktop\\\\poker-club\\\\src\\\\pages\\\\PokerComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokerComponent = () => {\n  _s();\n  const playerName = window.localStorage.getItem('playerName');\n  const [test, setTest] = useState(null);\n  const navigate = useNavigate();\n  const {\n    ws,\n    initializeWebSocket\n  } = useWebSocket();\n  useEffect(() => {\n    initializeWebSocket(); // Open WebSocket only after component renders\n  }, [initializeWebSocket]);\n  useEffect(() => {\n    if (!ws) return; // Wait for WebSocket to be defined\n\n    ws.onopen = () => {\n      // Send data once the WebSocket is open\n      ws.send(JSON.stringify({\n        action: 'joinGame',\n        playerName: playerName\n      }));\n    };\n    ws.onmessage = e => {\n      const data = JSON.parse(e.data);\n      setTest(data.message);\n      if (data.tableId) {\n        navigate(`/play/${data.tableId}`);\n        window.localStorage.setItem('tableId', data.tableId);\n      }\n      console.log(data);\n    };\n\n    // Clean up WebSocket event listeners on unmount\n    return () => {\n      if (ws) {\n        ws.onopen = null;\n        ws.onmessage = null;\n      }\n    };\n  }, [ws, playerName, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gaga\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(PokerComponent, \"PiFKef2oEllX7tbKSdmBWYVUiH0=\", true, function () {\n  return [useNavigate];\n});\n_c = PokerComponent;\nexport default PokerComponent;\nvar _c;\n$RefreshReg$(_c, \"PokerComponent\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","PokerComponent","_s","playerName","window","localStorage","getItem","test","setTest","navigate","ws","initializeWebSocket","useWebSocket","onopen","send","JSON","stringify","action","onmessage","e","data","parse","message","tableId","setItem","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gaga/Desktop/poker-club/src/pages/PokerComponent.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst PokerComponent = () => {\r\n    const playerName = window.localStorage.getItem('playerName');\r\n    const [test, setTest] = useState<string | null>(null);\r\n    const navigate = useNavigate();\r\n    const { ws, initializeWebSocket } = useWebSocket();\r\n\r\n    \r\n    useEffect(() => {\r\n        initializeWebSocket(); // Open WebSocket only after component renders\r\n    }, [initializeWebSocket]);\r\n    \r\n    useEffect(() => {\r\n        if (!ws) return; // Wait for WebSocket to be defined\r\n    \r\n        ws.onopen = () => {\r\n            // Send data once the WebSocket is open\r\n            ws.send(JSON.stringify({ action: 'joinGame', playerName: playerName }));\r\n        };\r\n    \r\n        ws.onmessage = (e: MessageEvent) => {\r\n            const data = JSON.parse(e.data);\r\n            setTest(data.message);\r\n            if (data.tableId) {\r\n                navigate(`/play/${data.tableId}`);\r\n                window.localStorage.setItem('tableId', data.tableId);\r\n            }\r\n            console.log(data);\r\n        };\r\n    \r\n        // Clean up WebSocket event listeners on unmount\r\n        return () => {\r\n            if (ws) {\r\n                ws.onopen = null;\r\n                ws.onmessage = null;\r\n            }\r\n        };\r\n    }, [ws, playerName, navigate]);\r\n    \r\n    \r\n    return (\r\n        <div className='gaga'>\r\n            <h1>{test}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PokerComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,UAAU,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC5D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACrD,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEY,EAAE;IAAEC;EAAoB,CAAC,GAAGC,YAAY,CAAC,CAAC;EAGlDhB,SAAS,CAAC,MAAM;IACZe,mBAAmB,CAAC,CAAC,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACA,mBAAmB,CAAC,CAAC;EAEzBf,SAAS,CAAC,MAAM;IACZ,IAAI,CAACc,EAAE,EAAE,OAAO,CAAC;;IAEjBA,EAAE,CAACG,MAAM,GAAG,MAAM;MACd;MACAH,EAAE,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAE,UAAU;QAAEd,UAAU,EAAEA;MAAW,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEDO,EAAE,CAACQ,SAAS,GAAIC,CAAe,IAAK;MAChC,MAAMC,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACF,CAAC,CAACC,IAAI,CAAC;MAC/BZ,OAAO,CAACY,IAAI,CAACE,OAAO,CAAC;MACrB,IAAIF,IAAI,CAACG,OAAO,EAAE;QACdd,QAAQ,CAAC,SAASW,IAAI,CAACG,OAAO,EAAE,CAAC;QACjCnB,MAAM,CAACC,YAAY,CAACmB,OAAO,CAAC,SAAS,EAAEJ,IAAI,CAACG,OAAO,CAAC;MACxD;MACAE,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;IACrB,CAAC;;IAED;IACA,OAAO,MAAM;MACT,IAAIV,EAAE,EAAE;QACJA,EAAE,CAACG,MAAM,GAAG,IAAI;QAChBH,EAAE,CAACQ,SAAS,GAAG,IAAI;MACvB;IACJ,CAAC;EACL,CAAC,EAAE,CAACR,EAAE,EAAEP,UAAU,EAAEM,QAAQ,CAAC,CAAC;EAG9B,oBACIT,OAAA;IAAK2B,SAAS,EAAC,MAAM;IAAAC,QAAA,eACjB5B,OAAA;MAAA4B,QAAA,EAAKrB;IAAI;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd,CAAC;AAAC9B,EAAA,CA5CID,cAAc;EAAA,QAGCH,WAAW;AAAA;AAAAmC,EAAA,GAH1BhC,cAAc;AA8CpB,eAAeA,cAAc;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}