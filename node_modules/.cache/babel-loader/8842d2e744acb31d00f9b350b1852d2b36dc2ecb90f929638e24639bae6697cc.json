{"ast":null,"code":"// WebSocketService.js\nlet socket = null;\nexport const connectWebSocket = url => {\n  if (!socket || socket.readyState === WebSocket.CLOSED) {\n    socket = new WebSocket(url);\n    socket.onopen = () => {\n      console.log('WebSocket connection opened.');\n    };\n    socket.onclose = () => {\n      console.log('WebSocket connection closed.');\n    };\n    socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  return socket;\n};\nexport const sendMessage = message => {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    socket.send(JSON.stringify(message));\n  } else {\n    console.warn('WebSocket is not open. Message not sent:', message);\n  }\n};\nexport const addMessageListener = callback => {\n  if (socket) {\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      callback(data);\n    };\n  }\n};\nexport const closeWebSocket = () => {\n  if (socket) {\n    socket.close();\n    socket = null;\n  }\n};","map":{"version":3,"names":["socket","connectWebSocket","url","readyState","WebSocket","CLOSED","onopen","console","log","onclose","onerror","error","sendMessage","message","OPEN","send","JSON","stringify","warn","addMessageListener","callback","onmessage","event","data","parse","closeWebSocket","close"],"sources":["C:/Users/gaga/Desktop/poker-club/src/ws.js"],"sourcesContent":["// WebSocketService.js\r\nlet socket = null;\r\n\r\nexport const connectWebSocket = (url) => {\r\n  if (!socket || socket.readyState === WebSocket.CLOSED) {\r\n    socket = new WebSocket(url);\r\n\r\n    socket.onopen = () => {\r\n      console.log('WebSocket connection opened.');\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.log('WebSocket connection closed.');\r\n    };\r\n\r\n    socket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n  return socket;\r\n};\r\n\r\nexport const sendMessage = (message) => {\r\n  if (socket && socket.readyState === WebSocket.OPEN) {\r\n    socket.send(JSON.stringify(message));\r\n  } else {\r\n    console.warn('WebSocket is not open. Message not sent:', message);\r\n  }\r\n};\r\n\r\nexport const addMessageListener = (callback) => {\r\n  if (socket) {\r\n    socket.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      callback(data);\r\n    };\r\n  }\r\n};\r\n\r\nexport const closeWebSocket = () => {\r\n  if (socket) {\r\n    socket.close();\r\n    socket = null;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAG,IAAI;AAEjB,OAAO,MAAMC,gBAAgB,GAAIC,GAAG,IAAK;EACvC,IAAI,CAACF,MAAM,IAAIA,MAAM,CAACG,UAAU,KAAKC,SAAS,CAACC,MAAM,EAAE;IACrDL,MAAM,GAAG,IAAII,SAAS,CAACF,GAAG,CAAC;IAE3BF,MAAM,CAACM,MAAM,GAAG,MAAM;MACpBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC;IAEDR,MAAM,CAACS,OAAO,GAAG,MAAM;MACrBF,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC;IAEDR,MAAM,CAACU,OAAO,GAAIC,KAAK,IAAK;MAC1BJ,OAAO,CAACI,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;EACH;EACA,OAAOX,MAAM;AACf,CAAC;AAED,OAAO,MAAMY,WAAW,GAAIC,OAAO,IAAK;EACtC,IAAIb,MAAM,IAAIA,MAAM,CAACG,UAAU,KAAKC,SAAS,CAACU,IAAI,EAAE;IAClDd,MAAM,CAACe,IAAI,CAACC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;EACtC,CAAC,MAAM;IACLN,OAAO,CAACW,IAAI,CAAC,0CAA0C,EAAEL,OAAO,CAAC;EACnE;AACF,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAIC,QAAQ,IAAK;EAC9C,IAAIpB,MAAM,EAAE;IACVA,MAAM,CAACqB,SAAS,GAAIC,KAAK,IAAK;MAC5B,MAAMC,IAAI,GAAGP,IAAI,CAACQ,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;MACnCH,QAAQ,CAACG,IAAI,CAAC;IAChB,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAIzB,MAAM,EAAE;IACVA,MAAM,CAAC0B,KAAK,CAAC,CAAC;IACd1B,MAAM,GAAG,IAAI;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}