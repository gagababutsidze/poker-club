{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaga\\\\Desktop\\\\poker-club\\\\src\\\\pages\\\\PokerComponent.tsx\",\n  _s = $RefreshSig$();\n/*import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Playboard from './Playboard';\r\n//import { useWebSocket } from '../WebSocketContext';\r\n\r\nconst PokerComponent = () => {\r\n    const playerName = window.localStorage.getItem('playerName');\r\n    const [test, setTest] = useState<string | null>(null);\r\n    const navigate = useNavigate();\r\n    const connection = useRef<WebSocket | null>(null);\r\n    let [check, setCheck] = useState(false)\r\n\r\n    useEffect(() => {\r\n                console.log('პოკერ კომპონენტი ჩაირთო');\r\n        let is = false\r\n\r\n        if (!connection.current) {\r\n            connection.current = new WebSocket('ws://localhost:8080/join')\r\n            // Handle WebSocket events\r\n            connection.current.onopen = () => {\r\n               connection.current?.send(JSON.stringify({ playerName, action: 'joinGame' }));\r\n            };\r\n\r\n            connection.current.onmessage = (e:any) => {\r\n                \r\n                const data = JSON.parse(e.data);\r\n                console.log('PokerComponent received:', data);\r\n                setTest(data.message);\r\n                if (data.tableId) {\r\n\r\n                    let gaga = false\r\n\r\n\r\n                    const func = () => {\r\n                        let test = connection.current?.send(JSON.stringify({ playerName, action: 'close connection' }));\r\n                        gaga = true;\r\n                    }\r\n\r\n                    func()\r\n\r\n                   \r\n\r\n\r\n                    setTimeout(() => {\r\n                        connection.current?.close();\r\n                        console.log('WebSocket connection closed');\r\n                    }, 100);\r\n                    if (gaga) {\r\n                        window.localStorage.setItem('tableId', data.tableId)\r\n                        navigate(`/play/${data.tableId}`)\r\n                    }\r\n           \r\n                }\r\n\r\n\r\n                \r\n            }\r\n\r\n  \r\n\r\n        }\r\n\r\n            \r\n     \r\n    }, []);    \r\n\r\n    return (\r\n        <>\r\n        \r\n           \r\n            <h1>{test}</h1>\r\n            <h3>Welcome to the Poker Game!</h3>\r\n       \r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokerComponent;\r\n*/\n\nimport { useEffect } from \"react\";\nimport { useWebSocket } from \"../WS\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokerComponent = () => {\n  _s();\n  const {\n    socket,\n    connect\n  } = useWebSocket();\n  useEffect(() => {\n    connect(); // Open WebSocket only when PokerComponent renders\n\n    if (socket) {\n      socket.send;\n      socket.onmessage = event => {\n        console.log(\"PokerComponent received:\", event.data);\n      };\n    }\n    return () => {\n      if (socket) {\n        socket.onmessage = null; // Cleanup\n      }\n    };\n  }, [connect, socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"PokerComponent\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 12\n  }, this);\n};\n_s(PokerComponent, \"WBX+SHcRjOSLXjP+xg7efmtfnFM=\", false, function () {\n  return [useWebSocket];\n});\n_c = PokerComponent;\nexport default PokerComponent;\nvar _c;\n$RefreshReg$(_c, \"PokerComponent\");","map":{"version":3,"names":["useEffect","useWebSocket","jsxDEV","_jsxDEV","PokerComponent","_s","socket","connect","send","onmessage","event","console","log","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gaga/Desktop/poker-club/src/pages/PokerComponent.tsx"],"sourcesContent":["/*import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Playboard from './Playboard';\r\n//import { useWebSocket } from '../WebSocketContext';\r\n\r\nconst PokerComponent = () => {\r\n    const playerName = window.localStorage.getItem('playerName');\r\n    const [test, setTest] = useState<string | null>(null);\r\n    const navigate = useNavigate();\r\n    const connection = useRef<WebSocket | null>(null);\r\n    let [check, setCheck] = useState(false)\r\n\r\n    useEffect(() => {\r\n                console.log('პოკერ კომპონენტი ჩაირთო');\r\n        let is = false\r\n\r\n        if (!connection.current) {\r\n            connection.current = new WebSocket('ws://localhost:8080/join')\r\n            // Handle WebSocket events\r\n            connection.current.onopen = () => {\r\n               connection.current?.send(JSON.stringify({ playerName, action: 'joinGame' }));\r\n            };\r\n\r\n            connection.current.onmessage = (e:any) => {\r\n                \r\n                const data = JSON.parse(e.data);\r\n                console.log('PokerComponent received:', data);\r\n                setTest(data.message);\r\n                if (data.tableId) {\r\n\r\n                    let gaga = false\r\n\r\n\r\n                    const func = () => {\r\n                        let test = connection.current?.send(JSON.stringify({ playerName, action: 'close connection' }));\r\n                        gaga = true;\r\n                    }\r\n\r\n                    func()\r\n\r\n                   \r\n\r\n\r\n                    setTimeout(() => {\r\n                        connection.current?.close();\r\n                        console.log('WebSocket connection closed');\r\n                    }, 100);\r\n                    if (gaga) {\r\n                        window.localStorage.setItem('tableId', data.tableId)\r\n                        navigate(`/play/${data.tableId}`)\r\n                    }\r\n           \r\n                }\r\n\r\n\r\n                \r\n            }\r\n\r\n  \r\n\r\n        }\r\n\r\n            \r\n     \r\n    }, []);    \r\n\r\n    return (\r\n        <>\r\n        \r\n           \r\n            <h1>{test}</h1>\r\n            <h3>Welcome to the Poker Game!</h3>\r\n       \r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokerComponent;\r\n*/\r\n\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useWebSocket } from \"../WS\";\r\n\r\nconst PokerComponent = () => {\r\n    const { socket, connect } = useWebSocket();\r\n\r\n    useEffect(() => {\r\n        connect(); // Open WebSocket only when PokerComponent renders\r\n\r\n        \r\n    \r\n        if (socket) {\r\n            socket.send\r\n            socket.onmessage = (event) => {\r\n                console.log(\"PokerComponent received:\", event.data);\r\n            };\r\n        }\r\n    \r\n        return () => {\r\n            if (socket) {\r\n                socket.onmessage = null; // Cleanup\r\n            }\r\n        };\r\n    }, [connect, socket]);\r\n    \r\n\r\n    return <div>PokerComponent</div>;\r\n};\r\n\r\nexport default PokerComponent;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,YAAY,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGN,YAAY,CAAC,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZO,OAAO,CAAC,CAAC,CAAC,CAAC;;IAIX,IAAID,MAAM,EAAE;MACRA,MAAM,CAACE,IAAI;MACXF,MAAM,CAACG,SAAS,GAAIC,KAAK,IAAK;QAC1BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,KAAK,CAACG,IAAI,CAAC;MACvD,CAAC;IACL;IAEA,OAAO,MAAM;MACT,IAAIP,MAAM,EAAE;QACRA,MAAM,CAACG,SAAS,GAAG,IAAI,CAAC,CAAC;MAC7B;IACJ,CAAC;EACL,CAAC,EAAE,CAACF,OAAO,EAAED,MAAM,CAAC,CAAC;EAGrB,oBAAOH,OAAA;IAAAW,QAAA,EAAK;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACpC,CAAC;AAACb,EAAA,CAxBID,cAAc;EAAA,QACYH,YAAY;AAAA;AAAAkB,EAAA,GADtCf,cAAc;AA0BpB,eAAeA,cAAc;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}