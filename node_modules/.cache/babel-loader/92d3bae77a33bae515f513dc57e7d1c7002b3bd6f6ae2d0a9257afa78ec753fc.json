{"ast":null,"code":"/*import React, { createContext, useContext, useEffect, useRef } from 'react';\r\n\r\n// Context to share WebSocket connection across the app\r\nconst WebSocketContext = createContext<WebSocket | null>(null);\r\n\r\nexport const WebSocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const connection = useRef<WebSocket | null>(null);\r\n    useEffect(() => {\r\n        let attempts = 0;\r\n    \r\n        const connect = () => {\r\n            const ws = new WebSocket('ws://localhost:8080');\r\n    \r\n            ws.onopen = () => {\r\n                console.log('WebSocket connection established');\r\n                attempts = 0; // Reset attempts on successful connection\r\n            };\r\n    \r\n            ws.onerror = (err) => {\r\n                console.error('WebSocket error:', err);\r\n            };\r\n    \r\n            ws.onclose = () => {\r\n                console.log('WebSocket closed. Reconnecting...');\r\n                if (attempts < 5) {\r\n                    setTimeout(connect, 1000 * Math.pow(2, attempts++)); // Exponential backoff\r\n                }\r\n            };\r\n    \r\n            connection.current = ws;\r\n        };\r\n    \r\n        connect();\r\n    \r\n        return () => connection.current?.close();\r\n    }, []);\r\n\r\n    return (\r\n        <WebSocketContext.Provider value={connection.current}>\r\n            {children}\r\n        </WebSocketContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useWebSocket = () => {\r\n    return useContext(WebSocketContext);\r\n};\r\n*/","map":{"version":3,"names":[],"sources":["C:/Users/gaga/Desktop/poker-club/src/WebSocketContext.tsx"],"sourcesContent":["/*import React, { createContext, useContext, useEffect, useRef } from 'react';\r\n\r\n// Context to share WebSocket connection across the app\r\nconst WebSocketContext = createContext<WebSocket | null>(null);\r\n\r\nexport const WebSocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const connection = useRef<WebSocket | null>(null);\r\n    useEffect(() => {\r\n        let attempts = 0;\r\n    \r\n        const connect = () => {\r\n            const ws = new WebSocket('ws://localhost:8080');\r\n    \r\n            ws.onopen = () => {\r\n                console.log('WebSocket connection established');\r\n                attempts = 0; // Reset attempts on successful connection\r\n            };\r\n    \r\n            ws.onerror = (err) => {\r\n                console.error('WebSocket error:', err);\r\n            };\r\n    \r\n            ws.onclose = () => {\r\n                console.log('WebSocket closed. Reconnecting...');\r\n                if (attempts < 5) {\r\n                    setTimeout(connect, 1000 * Math.pow(2, attempts++)); // Exponential backoff\r\n                }\r\n            };\r\n    \r\n            connection.current = ws;\r\n        };\r\n    \r\n        connect();\r\n    \r\n        return () => connection.current?.close();\r\n    }, []);\r\n\r\n    return (\r\n        <WebSocketContext.Provider value={connection.current}>\r\n            {children}\r\n        </WebSocketContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useWebSocket = () => {\r\n    return useContext(WebSocketContext);\r\n};\r\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}