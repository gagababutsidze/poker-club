{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaga\\\\Desktop\\\\poker-club\\\\src\\\\pages\\\\PokerComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokerComponent = () => {\n  _s();\n  const playerName = window.localStorage.getItem('playerName');\n  const [test, setTest] = useState(null);\n  const navigate = useNavigate();\n  const connection = useRef(null);\n  useEffect(() => {\n    if (!connection.current) {\n      connection.current = new WebSocket('ws://localhost:8080');\n      connection.current.onopen = () => {\n        var _connection$current;\n        (_connection$current = connection.current) === null || _connection$current === void 0 ? void 0 : _connection$current.send(JSON.stringify({\n          playerName: playerName,\n          action: 'joinGame'\n        }));\n      };\n      connection.current.onmessage = e => {\n        const data = e.data;\n      };\n    }\n\n    /* const initiateWebSocket = async () => {\r\n         try {\r\n             const wss = await connectWebSocket('ws://localhost:8080');\r\n             sendMessage({ playerName: playerName, action: 'joinGame' });\r\n                     addMessageListener((data: any) => {\r\n                 console.log('PokerComponent received:', data);\r\n                 setTest(data.message);\r\n                         if (data.tableId) {\r\n                     window.localStorage.setItem('tableId', data.tableId);\r\n                     //closeWebSocket(); // Close WebSocket before navigating\r\n                     navigate(`/play/${data.tableId}`);\r\n                 }\r\n             });\r\n         } catch (error) {\r\n             console.error('Failed to connect WebSocket:', error);\r\n         }\r\n     };\r\n             initiateWebSocket();\r\n             return () => {\r\n      //   closeWebSocket(); // Clean up WebSocket on unmount\r\n     };*/\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(PokerComponent, \"W/tuKdaJ7P7mc5JCUCa+qbE50eM=\", false, function () {\n  return [useNavigate];\n});\n_c = PokerComponent;\nexport default PokerComponent;\nvar _c;\n$RefreshReg$(_c, \"PokerComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useNavigate","jsxDEV","_jsxDEV","PokerComponent","_s","playerName","window","localStorage","getItem","test","setTest","navigate","connection","current","WebSocket","onopen","_connection$current","send","JSON","stringify","action","onmessage","e","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gaga/Desktop/poker-club/src/pages/PokerComponent.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { connectWebSocket, sendMessage, addMessageListener, closeWebSocket } from '../ws';\r\n\r\nconst PokerComponent = () => {\r\n    const playerName = window.localStorage.getItem('playerName');\r\n    const [test, setTest] = useState<string | null>(null);\r\n    const navigate = useNavigate();\r\n    const connection = useRef<WebSocket | null>(null);\r\n   \r\nuseEffect(() => {\r\n\r\n    if (!connection.current) {\r\n        connection.current = new WebSocket('ws://localhost:8080')\r\n        connection.current.onopen = () => {\r\n            connection.current?.send(JSON.stringify({ playerName: playerName, action: 'joinGame' }))\r\n        }\r\n\r\n        connection.current.onmessage = (e) => {\r\n            const data = e.data\r\n        }\r\n    }\r\n    \r\n         /* const initiateWebSocket = async () => {\r\n              try {\r\n                  const wss = await connectWebSocket('ws://localhost:8080');\r\n                  sendMessage({ playerName: playerName, action: 'joinGame' });\r\n      \r\n                  addMessageListener((data: any) => {\r\n                      console.log('PokerComponent received:', data);\r\n                      setTest(data.message);\r\n      \r\n                      if (data.tableId) {\r\n                          window.localStorage.setItem('tableId', data.tableId);\r\n                          //closeWebSocket(); // Close WebSocket before navigating\r\n                          navigate(`/play/${data.tableId}`);\r\n                      }\r\n                  });\r\n              } catch (error) {\r\n                  console.error('Failed to connect WebSocket:', error);\r\n              }\r\n          };\r\n      \r\n          initiateWebSocket();\r\n      \r\n          return () => {\r\n           //   closeWebSocket(); // Clean up WebSocket on unmount\r\n          };*/\r\n\r\n      \r\n      \r\n  }, [])\r\n   \r\n    \r\n    \r\n    return (\r\n        <div >\r\n            <h1>{test}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default PokerComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,UAAU,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC5D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACrD,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,UAAU,GAAGd,MAAM,CAAmB,IAAI,CAAC;EAErDD,SAAS,CAAC,MAAM;IAEZ,IAAI,CAACe,UAAU,CAACC,OAAO,EAAE;MACrBD,UAAU,CAACC,OAAO,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;MACzDF,UAAU,CAACC,OAAO,CAACE,MAAM,GAAG,MAAM;QAAA,IAAAC,mBAAA;QAC9B,CAAAA,mBAAA,GAAAJ,UAAU,CAACC,OAAO,cAAAG,mBAAA,uBAAlBA,mBAAA,CAAoBC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAAEd,UAAU,EAAEA,UAAU;UAAEe,MAAM,EAAE;QAAW,CAAC,CAAC,CAAC;MAC5F,CAAC;MAEDR,UAAU,CAACC,OAAO,CAACQ,SAAS,GAAIC,CAAC,IAAK;QAClC,MAAMC,IAAI,GAAGD,CAAC,CAACC,IAAI;MACvB,CAAC;IACL;;IAEK;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAQE,CAAC,EAAE,EAAE,CAAC;EAIJ,oBACIrB,OAAA;IAAAsB,QAAA,eACItB,OAAA;MAAAsB,QAAA,EAAKf;IAAI;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd,CAAC;AAACxB,EAAA,CAxDID,cAAc;EAAA,QAGCH,WAAW;AAAA;AAAA6B,EAAA,GAH1B1B,cAAc;AA2DpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}