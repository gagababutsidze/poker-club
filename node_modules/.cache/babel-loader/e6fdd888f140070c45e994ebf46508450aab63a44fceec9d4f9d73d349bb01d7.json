{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaga\\\\Desktop\\\\poker-club\\\\src\\\\pages\\\\PokerComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useWebSocket } from '../WebSocketContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokerComponent = () => {\n  _s();\n  const {\n    ws\n  } = useWebSocket(); // Access the WebSocket from context\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const playerName = window.localStorage.getItem('playerName');\n  useEffect(() => {\n    if (ws) {\n      // Make sure WebSocket is connected\n      ws.onopen = () => {\n        console.log('WebSocket connection established');\n        // Send data after WebSocket connection is open\n        ws.send(JSON.stringify({\n          action: 'joinGame',\n          playerName: playerName\n        }));\n      };\n      ws.onmessage = e => {\n        const data = JSON.parse(e.data);\n        setMessage(data.message);\n        if (data.tableId) {\n          navigate(`/play/${data.tableId}`);\n          window.localStorage.setItem('tableId', data.tableId);\n        }\n        console.log(data);\n      };\n\n      // Cleanup when the component unmounts\n      return () => {\n        if (ws) {\n          ws.onopen = null;\n          ws.onmessage = null;\n        }\n      };\n    }\n  }, [ws, playerName, navigate]); // Only trigger this when ws or playerName changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Poker Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(PokerComponent, \"J6aYCLtLqtarZ2wWIsRtB5HY/kY=\", false, function () {\n  return [useWebSocket, useNavigate];\n});\n_c = PokerComponent;\nexport default PokerComponent;\nvar _c;\n$RefreshReg$(_c, \"PokerComponent\");","map":{"version":3,"names":["React","useEffect","useState","useWebSocket","useNavigate","jsxDEV","_jsxDEV","PokerComponent","_s","ws","message","setMessage","navigate","playerName","window","localStorage","getItem","onopen","console","log","send","JSON","stringify","action","onmessage","e","data","parse","tableId","setItem","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gaga/Desktop/poker-club/src/pages/PokerComponent.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useWebSocket } from '../WebSocketContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst PokerComponent = () => {\r\n    const { ws } = useWebSocket(); // Access the WebSocket from context\r\n    const [message, setMessage] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const playerName = window.localStorage.getItem('playerName');\r\n\r\n    useEffect(() => {\r\n        if (ws) {\r\n            // Make sure WebSocket is connected\r\n            ws.onopen = () => {\r\n                console.log('WebSocket connection established');\r\n                // Send data after WebSocket connection is open\r\n                ws.send(JSON.stringify({ action: 'joinGame', playerName: playerName }));\r\n            };\r\n\r\n            ws.onmessage = (e) => {\r\n                const data = JSON.parse(e.data);\r\n                setMessage(data.message);\r\n                if (data.tableId) {\r\n                    navigate(`/play/${data.tableId}`);\r\n                    window.localStorage.setItem('tableId', data.tableId);\r\n                }\r\n                console.log(data);\r\n            };\r\n\r\n            // Cleanup when the component unmounts\r\n            return () => {\r\n                if (ws) {\r\n                    ws.onopen = null;\r\n                    ws.onmessage = null;\r\n                }\r\n            };\r\n        }\r\n    }, [ws, playerName, navigate]); // Only trigger this when ws or playerName changes\r\n\r\n    return (\r\n        <div>\r\n            <h2>Poker Game</h2>\r\n            <p>{message}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PokerComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAG,CAAC,GAAGN,YAAY,CAAC,CAAC,CAAC,CAAC;EAC/B,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMU,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,UAAU,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAE5Df,SAAS,CAAC,MAAM;IACZ,IAAIQ,EAAE,EAAE;MACJ;MACAA,EAAE,CAACQ,MAAM,GAAG,MAAM;QACdC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C;QACAV,EAAE,CAACW,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAE,UAAU;UAAEV,UAAU,EAAEA;QAAW,CAAC,CAAC,CAAC;MAC3E,CAAC;MAEDJ,EAAE,CAACe,SAAS,GAAIC,CAAC,IAAK;QAClB,MAAMC,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACF,CAAC,CAACC,IAAI,CAAC;QAC/Bf,UAAU,CAACe,IAAI,CAAChB,OAAO,CAAC;QACxB,IAAIgB,IAAI,CAACE,OAAO,EAAE;UACdhB,QAAQ,CAAC,SAASc,IAAI,CAACE,OAAO,EAAE,CAAC;UACjCd,MAAM,CAACC,YAAY,CAACc,OAAO,CAAC,SAAS,EAAEH,IAAI,CAACE,OAAO,CAAC;QACxD;QACAV,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;MACrB,CAAC;;MAED;MACA,OAAO,MAAM;QACT,IAAIjB,EAAE,EAAE;UACJA,EAAE,CAACQ,MAAM,GAAG,IAAI;UAChBR,EAAE,CAACe,SAAS,GAAG,IAAI;QACvB;MACJ,CAAC;IACL;EACJ,CAAC,EAAE,CAACf,EAAE,EAAEI,UAAU,EAAED,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhC,oBACIN,OAAA;IAAAwB,QAAA,gBACIxB,OAAA;MAAAwB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB5B,OAAA;MAAAwB,QAAA,EAAIpB;IAAO;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEd,CAAC;AAAC1B,EAAA,CA1CID,cAAc;EAAA,QACDJ,YAAY,EAEVC,WAAW;AAAA;AAAA+B,EAAA,GAH1B5B,cAAc;AA4CpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}