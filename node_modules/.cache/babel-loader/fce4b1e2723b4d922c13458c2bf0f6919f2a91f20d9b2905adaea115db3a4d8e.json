{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaga\\\\Desktop\\\\poker-club\\\\src\\\\pages\\\\PokerComponent.tsx\",\n  _s = $RefreshSig$();\n/*import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Playboard from './Playboard';\r\n//import { useWebSocket } from '../WebSocketContext';\r\n\r\nconst PokerComponent = () => {\r\n    const playerName = window.localStorage.getItem('playerName');\r\n    const [test, setTest] = useState<string | null>(null);\r\n    const navigate = useNavigate();\r\n    const connection = useRef<WebSocket | null>(null);\r\n    let [check, setCheck] = useState(false)\r\n\r\n    useEffect(() => {\r\n                console.log('პოკერ კომპონენტი ჩაირთო');\r\n        let is = false\r\n\r\n        if (!connection.current) {\r\n            connection.current = new WebSocket('ws://localhost:8080/join')\r\n            // Handle WebSocket events\r\n            connection.current.onopen = () => {\r\n               connection.current?.send(JSON.stringify({ playerName, action: 'joinGame' }));\r\n            };\r\n\r\n            connection.current.onmessage = (e:any) => {\r\n                \r\n                const data = JSON.parse(e.data);\r\n                console.log('PokerComponent received:', data);\r\n                setTest(data.message);\r\n                if (data.tableId) {\r\n\r\n                    let gaga = false\r\n\r\n\r\n                    const func = () => {\r\n                        let test = connection.current?.send(JSON.stringify({ playerName, action: 'close connection' }));\r\n                        gaga = true;\r\n                    }\r\n\r\n                    func()\r\n\r\n                   \r\n\r\n\r\n                    setTimeout(() => {\r\n                        connection.current?.close();\r\n                        console.log('WebSocket connection closed');\r\n                    }, 100);\r\n                    if (gaga) {\r\n                        window.localStorage.setItem('tableId', data.tableId)\r\n                        navigate(`/play/${data.tableId}`)\r\n                    }\r\n           \r\n                }\r\n\r\n\r\n                \r\n            }\r\n\r\n  \r\n\r\n        }\r\n\r\n            \r\n     \r\n    }, []);    \r\n\r\n    return (\r\n        <>\r\n        \r\n           \r\n            <h1>{test}</h1>\r\n            <h3>Welcome to the Poker Game!</h3>\r\n       \r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokerComponent;\r\n*/\n\nimport { useEffect, useState } from \"react\";\nimport { useWebSocket } from \"../WS\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PokerComponent = () => {\n  _s();\n  const playerName = window.localStorage.getItem('playerName');\n  const {\n    socket,\n    connect\n  } = useWebSocket();\n  const [test, setTest] = useState(null);\n  useEffect(() => {\n    connect(); // Open WebSocket when PokerComponent renders\n\n    if (socket) {\n      socket.onopen = () => {\n        console.log(\"WebSocket is open, sending data...\");\n        socket.send(JSON.stringify({\n          playerName,\n          action: 'joinGame'\n        }));\n      };\n      socket.onmessage = event => {\n        console.log(\"PokerComponent received:\", event.data);\n        const data = JSON.parse(event.data);\n        if (data.message) {\n          setTest();\n        }\n      };\n    }\n    return () => {\n      if (socket) {\n        socket.onmessage = null;\n        socket.onopen = null;\n      }\n    };\n  }, [connect, socket]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Welcome to the Poker Game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(PokerComponent, \"gh6qUHXOR/nsNDzIupvji/XXEJ8=\", false, function () {\n  return [useWebSocket];\n});\n_c = PokerComponent;\nexport default PokerComponent;\nvar _c;\n$RefreshReg$(_c, \"PokerComponent\");","map":{"version":3,"names":["useEffect","useState","useWebSocket","jsxDEV","_jsxDEV","Fragment","_Fragment","PokerComponent","_s","playerName","window","localStorage","getItem","socket","connect","test","setTest","onopen","console","log","send","JSON","stringify","action","onmessage","event","data","parse","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gaga/Desktop/poker-club/src/pages/PokerComponent.tsx"],"sourcesContent":["/*import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Playboard from './Playboard';\r\n//import { useWebSocket } from '../WebSocketContext';\r\n\r\nconst PokerComponent = () => {\r\n    const playerName = window.localStorage.getItem('playerName');\r\n    const [test, setTest] = useState<string | null>(null);\r\n    const navigate = useNavigate();\r\n    const connection = useRef<WebSocket | null>(null);\r\n    let [check, setCheck] = useState(false)\r\n\r\n    useEffect(() => {\r\n                console.log('პოკერ კომპონენტი ჩაირთო');\r\n        let is = false\r\n\r\n        if (!connection.current) {\r\n            connection.current = new WebSocket('ws://localhost:8080/join')\r\n            // Handle WebSocket events\r\n            connection.current.onopen = () => {\r\n               connection.current?.send(JSON.stringify({ playerName, action: 'joinGame' }));\r\n            };\r\n\r\n            connection.current.onmessage = (e:any) => {\r\n                \r\n                const data = JSON.parse(e.data);\r\n                console.log('PokerComponent received:', data);\r\n                setTest(data.message);\r\n                if (data.tableId) {\r\n\r\n                    let gaga = false\r\n\r\n\r\n                    const func = () => {\r\n                        let test = connection.current?.send(JSON.stringify({ playerName, action: 'close connection' }));\r\n                        gaga = true;\r\n                    }\r\n\r\n                    func()\r\n\r\n                   \r\n\r\n\r\n                    setTimeout(() => {\r\n                        connection.current?.close();\r\n                        console.log('WebSocket connection closed');\r\n                    }, 100);\r\n                    if (gaga) {\r\n                        window.localStorage.setItem('tableId', data.tableId)\r\n                        navigate(`/play/${data.tableId}`)\r\n                    }\r\n           \r\n                }\r\n\r\n\r\n                \r\n            }\r\n\r\n  \r\n\r\n        }\r\n\r\n            \r\n     \r\n    }, []);    \r\n\r\n    return (\r\n        <>\r\n        \r\n           \r\n            <h1>{test}</h1>\r\n            <h3>Welcome to the Poker Game!</h3>\r\n       \r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokerComponent;\r\n*/\r\n\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useWebSocket } from \"../WS\";\r\n\r\nconst PokerComponent = () => {\r\n\r\n    const playerName = window.localStorage.getItem('playerName');\r\n    const { socket, connect } = useWebSocket();\r\n    const [test, setTest] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        connect(); // Open WebSocket when PokerComponent renders\r\n    \r\n        if (socket) {\r\n            socket.onopen = () => {\r\n                console.log(\"WebSocket is open, sending data...\");\r\n                socket.send(JSON.stringify({ playerName, action: 'joinGame' }));\r\n            };\r\n    \r\n            socket.onmessage = (event) => {\r\n                console.log(\"PokerComponent received:\", event.data);\r\n                const data = JSON.parse(event.data)\r\n\r\n                if (data.message) {\r\n                    setTest()\r\n                }\r\n            };\r\n        }\r\n    \r\n        return () => {\r\n            if (socket) {\r\n                socket.onmessage = null;\r\n                socket.onopen = null;\r\n            }\r\n        };\r\n    }, [connect, socket]);\r\n    \r\n    \r\n\r\n    return  (\r\n        <>\r\n        \r\n           \r\n            <h1>{test}</h1>\r\n            <h3>Welcome to the Poker Game!</h3>\r\n       \r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokerComponent;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEzB,MAAMC,UAAU,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC5D,MAAM;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGZ,YAAY,CAAC,CAAC;EAC1C,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EAErDD,SAAS,CAAC,MAAM;IACZc,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEX,IAAID,MAAM,EAAE;MACRA,MAAM,CAACI,MAAM,GAAG,MAAM;QAClBC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjDN,MAAM,CAACO,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAAEb,UAAU;UAAEc,MAAM,EAAE;QAAW,CAAC,CAAC,CAAC;MACnE,CAAC;MAEDV,MAAM,CAACW,SAAS,GAAIC,KAAK,IAAK;QAC1BP,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEM,KAAK,CAACC,IAAI,CAAC;QACnD,MAAMA,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;QAEnC,IAAIA,IAAI,CAACE,OAAO,EAAE;UACdZ,OAAO,CAAC,CAAC;QACb;MACJ,CAAC;IACL;IAEA,OAAO,MAAM;MACT,IAAIH,MAAM,EAAE;QACRA,MAAM,CAACW,SAAS,GAAG,IAAI;QACvBX,MAAM,CAACI,MAAM,GAAG,IAAI;MACxB;IACJ,CAAC;EACL,CAAC,EAAE,CAACH,OAAO,EAAED,MAAM,CAAC,CAAC;EAIrB,oBACIT,OAAA,CAAAE,SAAA;IAAAuB,QAAA,gBAGIzB,OAAA;MAAAyB,QAAA,EAAKd;IAAI;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACf7B,OAAA;MAAAyB,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAGrC,CAAC;AAEX,CAAC;AAACzB,EAAA,CA7CID,cAAc;EAAA,QAGYL,YAAY;AAAA;AAAAgC,EAAA,GAHtC3B,cAAc;AA+CpB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}